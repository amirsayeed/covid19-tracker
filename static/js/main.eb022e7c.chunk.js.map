{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/image.png","App.js","reportWebVitals.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","map","positive","death","date","dateChecked","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","length","labels","toLocaleDateString","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb022e7c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2s0Iw\",\"card\":\"Cards_card__3nQw4\",\"infected\":\"Cards_infected__2StBT\",\"recovered\":\"Cards_recovered__cezxN\",\"deaths\":\"Cards_deaths__2Gxba\"};","import React from 'react';\r\n\r\nimport {Card,CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup'\r\nimport styles from './Cards.module.css';\r\nimport cx from 'classnames';\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return 'Loading...';\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\r\n           <CardContent>\r\n             <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n           <Typography variant=\"h5\">\r\n             <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\" />\r\n           </Typography>\r\n           <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n          <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n           </CardContent>  \r\n        </Grid>\r\n       \r\n<Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n           <CardContent>\r\n          <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n          \r\n           <Typography variant=\"h5\">\r\n             <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\" />\r\n           </Typography>\r\n           <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n          <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n           </CardContent>  \r\n        </Grid>\r\n    <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n           <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n           <Typography variant=\"h5\">\r\n             <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\" />\r\n           </Typography>\r\n           <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n          <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n           </CardContent>  \r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n  if(country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n   \r\n  try {\r\n    const { data: {confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n    \r\n    return {confirmed,recovered,deaths,lastUpdate};\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n}\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n      const { data } = await axios.get('https://api.covidtracking.com/v1/us/daily.json');\r\n  \r\n      return data.map(({ positive, recovered, death, dateChecked: date }) => ({ confirmed: positive, recovered, deaths: death, date }));\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  };\r\n export const fetchCountries = async () => {\r\n   try {\r\n     const{ data: { countries }} = await axios.get(`${url}/countries`);\r\n     return countries.map((country) => country.name);\r\n\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n };\r\n\r\n","import React, { useState, useEffect} from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from './Chart.module.css';\r\nconst Chart = ({ data: {confirmed, deaths, recovered}, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n \r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n     setDailyData(await fetchDailyData());\r\n    }\r\n    fetchAPI();\r\n  }, []);\r\n \r\n   const lineChart = (\r\n    dailyData.length\r\n    ? (\r\n    <Line \r\n    data={{\r\n     labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\r\n      datasets: [{\r\n        data: dailyData.map(({ confirmed }) => confirmed),\r\n        label: 'Infected',\r\n        borderColor: '#3333ff',\r\n        fill: true,\r\n      }, {\r\n        data: dailyData.map(({ deaths }) => deaths),  \r\n        label: 'Deaths',\r\n        borderColor: 'red',\r\n        backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n        fill: true,\r\n      }, {\r\n            data: dailyData.map(({ recovered }) => recovered),\r\n            label: 'Recovered',\r\n            borderColor: 'green',\r\n            backgroundColor: 'rgba(0, 255, 0, 0.5)',\r\n            fill: true,\r\n        }],\r\n    }}\r\n    />) : null\r\n  );\r\n  console.log(confirmed, recovered, deaths);\r\n  const barChart = (\r\n    confirmed\r\n    ? (\r\n      <Bar\r\n      data={{\r\n        labels: ['Infected','Recovered', 'Deaths'],\r\n        datasets: [{\r\n        labels: 'People',\r\n        backgroundColor: [\r\n          'rgba(0,0,255,0.5)',\r\n          'rgba(0,255,0,0.5)',\r\n          'rgba(255,0,0,0.5)',\r\n        ],\r\n        data: [confirmed.value, recovered.value, deaths.value],\r\n      }]\r\n    }}\r\n    options={{\r\n      legend: {display : false},\r\n      title: { display: true, text: `Current state in ${country}`},\r\n    }}\r\n      />\r\n\r\n    ) : null \r\n  );\r\n    return (\r\n    <div className={styles.container}>\r\n      {country ? barChart : lineChart}\r\n    </div>\r\n  )\r\n}\r\nexport default Chart;  ","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport { fetchCountries } from '../../api';\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n  \r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    }\r\n    fetchAPI();\r\n  }, [setFetchedCountries]);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n        <option value=\"\">United States</option>\r\n        {fetchedCountries.map((country, i)=> <option key ={i} value={country}>{country}</option>)}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  )\r\n}\r\n\r\nexport default CountryPicker;","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from 'react';\nimport styles from './App.module.css';\nimport {Cards,Chart,CountryPicker} from './components';\nimport { fetchData } from './api';\nimport coronaImage from './images/image.png';\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: '',\n  }\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n  }\n\n  handleCountryChange = async (country) => {\n     const fetchedData = await fetchData(country);\n     this.setState({ data: fetchedData, country: country });\n  }\n  render(){\n    const { data, country } = this.state;\n  return (\n    <div className={styles.container}>\n     <img className={styles.image} src={coronaImage} alt=\"COVID-19\" />\n     <Cards data={data} />\n     <CountryPicker handleCountryChange={this.handleCountryChange} />\n     <Chart data={data} country={country} />\n    </div>\n  )\n}\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2nkj0\",\"image\":\"App_image__2xJ8T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1VOx_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3Amgc\"};"],"sourceRoot":""}